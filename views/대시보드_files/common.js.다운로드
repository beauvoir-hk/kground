var check_elements_type = "input[type=text], input[type=radio], input[type=checkbox], input[type=password], input[type=email], input[type=tel], select, textarea";
var message_type = "alert";
var form_id = "frm";

$(function () {
	$("input").blur(function () {
		$this = $(this);
		if ($this.val().length > 0) {
			$this.addClass("active");
		} else {
			$this.removeClass("active");
		}
	});

	$(".accordion-title").click(function () {
		$(this).find("img").toggleClass("closed");
	});

	$("#search_btn").click(function () {
		GetList();
	});
	$("#search_text").keydown(function (key) {
		if (key.keyCode === 13) {
			GetList();
		}
	});
});

function PageMoveHref(path) {
	location.href = path;
}

function PageMoveReplace(path) {
	location.replace(path);
}

function OpenNewPage(path) {
	window.open(path);
}

function fnExcelReport(title) {
	var id = "list_table";
	if (title.indexOf("매칭결과") !== -1) {
		id += "_2";
	} else if (title.indexOf("매칭 대기현황") !== -1) {
		id += "_3";
	}

	var obj_list_title_length = $("#area_list_title th").length;

	if (area_data_id === "area_product_buy_reservation_result") {
		obj_list_title_length = $("#area_list_title_2 th").length;
	}
	else if (area_data_id === "area_product_buy_reservation_waiting_result") {
		obj_list_title_length = $("#area_list_title_3 th").length;
	}
	var not_excel_count = $("#not_excel").length;
	obj_list_title_length -= not_excel_count;

	$("#empty_list").attr("colspan", obj_list_title_length);

	var tab_text = '<html xmlns:x="urn:schemas-microsoft-com:office:excel">';
	tab_text = tab_text + '<head><meta http-equiv="content-type" content="application/vnd.ms-excel; charset=UTF-8">';
	tab_text = tab_text + "<xml><x:ExcelWorkbook><x:ExcelWorksheets><x:ExcelWorksheet>";
	tab_text = tab_text + "<x:Name>" + title + "</x:Name>";
	tab_text = tab_text + "<x:WorksheetOptions><x:Panes></x:Panes></x:WorksheetOptions></x:ExcelWorksheet>";
	tab_text = tab_text + "</x:ExcelWorksheets></x:ExcelWorkbook></xml></head><body>";
	tab_text = tab_text + "<table border='1px'>";
	var exportTable = $("#" + id).clone();
	exportTable.find("input").each(function (index, elem) {
		$(elem).remove();
	});
	exportTable.find("#not_excel").each(function (index, elem) {
		$(elem).remove();
	});
	exportTable.find(".g-type-link").each(function (index, elem) {
		$(elem).removeClass("g-type-link");
		$(elem).removeAttr("href");
	});
	tab_text = tab_text + exportTable.html();
	tab_text = tab_text + "</table></body></html>";
	var data_type = "data:application/vnd.ms-excel";
	var ua = window.navigator.userAgent;
	var msie = ua.indexOf("MSIE ");
	var fileName = title + ".xls";
	//Explorer 환경에서 다운로드
	if (msie > 0 || !!navigator.userAgent.match(/Trident.*rv\:11\./)) {
		if (window.navigator.msSaveBlob) {
			var blob = new Blob([tab_text], {
				type: "application/csv;charset=utf-8;"
			});
			navigator.msSaveBlob(blob, fileName);
		}
	} else {
		var blob2 = new Blob([tab_text], {
			type: "application/csv;charset=utf-8;"
		});
		var filename = fileName;
		var elem = window.document.createElement("a");
		elem.href = window.URL.createObjectURL(blob2);
		elem.download = filename;
		document.body.appendChild(elem);
		elem.click();
		document.body.removeChild(elem);
	}

	$("#empty_list").attr("colspan", obj_list_title_length + not_excel_count);
}

function fnSearch(inputId, list) {
	var input, filter, ul, li, a, i, txtValue;
	input = document.getElementById(inputId);
	filter = input.value.toUpperCase();

	for (i = 0; i < list.length; i++) {
		a = list[i];
		txtValue = a.textContent || a.innerText;
		if (txtValue.toUpperCase().indexOf(filter) > -1) {
			list[i].style.display = "";
		} else {
			list[i].style.display = "none";
		}
	}
}

function initCalendar() {
	var now_page_link = document.location.href.toLowerCase();
	var is_future_day = false;

	if (now_page_link.indexOf("productpossessionlist") !== -1) {
		is_future_day = true;
	}

	//조회기간 클릭 시
	$(".g-daybox").on("click", function () {
		$(".g-daybox").removeClass("c-active");
		var $this = $(this);
		var $thisId = $this.attr("id");
		$this.addClass("c-active");
		$("#sdate").addClass("c-active");

		$("#sdate, edate").datepicker("option", {
			maxDate: is_future_day ? "+30" : new Date()
		});

		$("#edate").datepicker("setDate", new Date());

		if ($thisId === "today") {
			$("#sdate").datepicker("setDate", new Date());
		} else if ($thisId === "week-1") {
			$("#sdate").datepicker("setDate", new Date().last().week());
		} else if ($thisId === "month-3") {
			$("#sdate").datepicker(
				"setDate",
				Date.today()
					.add(-3)
					.months()
			);
		} else if ($thisId === "all") {
			$("#sdate").val("");
			$("#edate").val("");
		}
	});

	$("#sdate").click(function () {
		$("#sdate").addClass("c-active");
	});

	//datepicker config
	$("#sdate,#edate").datepicker({
		showAnim: "",
		beforeShow: function (input, inst) {
			var sdateLeft = $("#sdate").offset().left;

			var sdateWidth = $("#sdate").outerWidth(true);
			var edateWidth = $("#edate").outerWidth(true);

			setTimeout(() => {
				$("#ui-datepicker-div").css({
					left: sdateLeft,
					width: sdateWidth + edateWidth + 30
				});
			});
		},
		onSelect: function (date) {
			$(this).addClass("ui-state-custom");
			return [true, "ui-state-custom", "closed"];
		}
	});

	//$("#sdate").datepicker("option", {
	//	maxDate: is_future_day ? "+30" : $("#edate").val(),
	//	onClose: function (selectedDate) {
	//		$("#edate").datepicker("option", "minDate", selectedDate);
	//	}
	//});

	//$("#edate").datepicker("option", {
	//	maxDate: is_future_day ? "+30" : new Date(),
	//	onClose: function (selectedDate) {
	//		$("#sdate").datepicker("option", "maxDate", selectedDate);
	//	}
	//});

	$("#sdate, edate").datepicker("option", {
		maxDate: is_future_day ? "+30" : new Date()
	});

	//기간 1주일으로 미리 선택
	if (now_page_link.indexOf("/master/companylist") === -1) {
		$("#week-1").addClass("c-active");
		$("#sdate").addClass("c-active");
		$("#sdate").datepicker("setDate", new Date().last().week());
		$("#edate").datepicker("setDate", new Date());
	}

	//width값 자동조정
	$("div.ui-datepicker").on("click", function () {
		var sdateWidth = $("#sdate").outerWidth(true);
		var edateWidth = $("#edate").outerWidth(true);

		$(this).outerWidth(sdateWidth + edateWidth + 30);
	});
}

function goBack() {
	window.history.back();
}

function ReturnMessage(obj, success, message) {
	if (message !== "") {
		InitMessage(obj);

		var id = obj.attr("id");
		var message_space_error = obj.parents(".wrap").children(".g-error");
		var message_space_success = obj.parents(".wrap").children(".g-succeed");

		if (success === true || success === "true") {
			if (message_type === "alert") {
				if (id === "member_id" || id === "center_leader_member_id" || id === "center_name" || id === "prefect_leader_member_id" || id === "prefect_name" || id === "token_id") {
					alert(message);
				}
			}
			else if (message_type === "view") {
				message_space_success.removeClass("hide");
				message_space_success.text(message);
			}
		}
		else {
			if (message_type === "alert") {
				alert(message);
			}
			else if (message_type === "view") {
				message_space_error.removeClass("hide");
				message_space_error.text(message);
			}
		}
	}
}

function InitMessage(obj) {
	var message_space_error = obj.parents(".wrap").children(".g-error");
	var message_space_success = obj.parents(".wrap").children(".g-succeed");

	message_space_success.removeClass("hide");
	message_space_error.removeClass("hide");
	message_space_success.addClass("hide");
	message_space_error.addClass("hide");
	message_space_success.text("");
	message_space_error.text("");
}

// 타입별 url셋팅
function GetUrl(action_type) {
	var url = "";
	if (action_type === "login") {
		url = "/Login/LoginProcess";
	}
	else if (action_type === "logout") {
		url = "/Login/LogoutProcess";
	}
	else if (action_type === "member_out_apply_confirm") {
		url = "/Admin/MemberOutApplyConfirmProcess";
	}
	else if (action_type === "member_out") {
		url = "/Admin/MemberOutProcess";
	}
	else if (action_type === "pin_clear") {
		url = "/Admin/PinClearProcess";
	}
	else if (action_type === "member_info_edit") {
		url = "/Admin/MemberInfoEditProcess";
	}
	else if (action_type === "organization_id_check") {
		url = "/Admin/OrganizationIdCheckProcess";
	}
	else if (action_type === "notice_write") {
		url = "/NoticeBoard/NoticeWriteProcess";
	}
	else if (action_type === "notice_edit" || action_type === "inquire_edit") {
		url = "/NoticeBoard/NoticeEditProcess";
	}
	else if (action_type === "notice_delete" || action_type === "inquire_delete") {
		url = "/NoticeBoard/NoticeDeleteProcess";
	}
	else if (action_type === "manage_pd") {
		url = "/Manage/ManagePDProcess";
	}
	else if (action_type === "privacy_policy" || action_type === "terms_of_use" || action_type === "main_notice") {
		url = "/Admin/CompanyEditProcess";
	}
	else if (action_type === "pay_apply_confirm") {
		url = "/List/PayApplyConfirmProcess";
	}
	else if (action_type === "deposit_setting") {
		url = "/Manage/DepositSettingProcess";
	}
	else if (action_type === "withdraw_setting") {
		url = "/Manage/WithdrawSettingProcess";
	}
	else if (action_type === "manage_package") {
		url = "/Manage/ManagePackageProcess";
	}
	else if (action_type === "package_setting") {
		url = "/Manage/PackageSettingProcess";
	}
	else if (action_type === "reward_setting") {
		url = "/Manage/RewardSettingProcess";
	}
	else if (action_type === "mining_distribution_setting") {
		url = "/Manage/MiningDistributionSettingProcess";
	}
	else if (action_type === "center_register") {
		url = "/Manage/CenterRegisterProcess";
	}
	else if (action_type === "center_info_edit") {
		url = "/List/CenterInfoEditProcess";
	}
	else if (action_type === "prefect_register") {
		url = "/Manage/PrefectRegisterProcess";
	}
	else if (action_type === "prefect_info_edit") {
		url = "/List/PrefectInfoEditProcess";
	}
	else if (action_type === "manage_product_buy_way") {
		url = "/Manage/ManageProductBuyWay";
	}
	else if (action_type === "product_info_edit") {
		url = "/List/ProductInfoEditProcess";
	}
	else if (action_type === "product_buy_reservation_process") {
		url = "/List/ProductBuyReservationProcess";
	}
	else if (action_type === "product_transaction_process") {
		url = "/List/ProductTransactionProcess";
	}
	else if (action_type === "manage_point") {
		url = "/Manage/PointProcess";
	}
	else if (action_type === "manage_change_point") {
		url = "/Manage/ChangePointProcess";
	}	
	else if (action_type === "manage_product") {
		url = "/Manage/ProductPaymentProcess";
	}
	else if (action_type === "manage_credit") {
		url = "/Manage/CreditPaymentProcess";
	}
	else if (action_type === "product_buy_delete_process") {
		url = "/List/ProductBuyDeleteProcess";
	}
	else if (action_type === "product_buy_reservation_permanent_delete_process") {
		url = "/List/ProductBuyReservationPermanentDeleteProcess";
	}
	else if (action_type === "product_buy_permanent_delete_process") {
		url = "/List/ProductBuyPermanentDeleteProcess";
	}
	else if (action_type === "change_dw_confirm_check") {
		url = "/List/ChangeDWConfirmCheckProcess";
	}
	else if (action_type === "product_buy_way_permanent_delete_process") {
		url = "/List/ProductBuyWayPermanentDeleteProcess";
	}
	else if (action_type === "product_incineration_process") {
		url = "/List/ProductIncinerationProcess";
	}
	else if (action_type === "product_possession_process") {
		url = "/List/ProductPossessionProcess";
	}
	else if (action_type === "package_product_info_edit") {
		url = "/List/PackageProductInfoEditProcess";
	}
	else if (action_type === "get_mother_address_balance") {
		url = "/List/GetMotherAddressBalanceProcess";
	}
	else if (action_type === "get_today_withdraw_possible_amount") {
		url = "/List/GetTodayWithdrawPossibleAmountProcess";
	}
	else if (action_type === "send_mother_address_process") {
		url = "/List/SendMotherAddressProcess";
	}
	else if (action_type === "manage_product_reservation") {
		url = "/Manage/ProductReservationProcess";
	}
	else if (action_type === "uqt_setting") {
		url = "/Manage/WithdrawSettingProcess";
	}
	else if (action_type === "point_info_edit") {
		url = "/Manage/PointInfoEditProcess";
	}
	else if (action_type === "lockup_info_edit") {
		url = "/List/LockupInfoEditProcess";
	}
	else if (action_type === "regist_ip_info") {
		url = "/Master/RegistIpProcess";
	}
	else if (action_type === "delete_ip_info") {
		url = "/Master/DeleteIpProcess";
	}
	else if (action_type === "mining_distribution_setting_process") {
		url = "/Admin/MiningDistributionSettingProcess";
	}
	else if (action_type === "get_user_turn_list") {
		url = "/Admin/UserTurnList";
	}
	else if (action_type === "regist_cs_info") {
		url = "/List/RegistCsInfoProcess";
	}
	else if (action_type === "delete_cs_info") {
		url = "/List/DeleteCsInfoProcess";
	}
	else if (action_type === "edit_cs_info") {
		url = "/List/EditCsInfoProcess";
	}
	else if (action_type === "regist_cs_reply_info") {
		url = "/Master/RegistCsReplyInfoProcess";
	}
	else if (action_type === "cancel_package_info") {
		url = "/List/CancelPackageProcess";
	}
	else if (action_type === "aigPackageRefund") {
		url = "/List/AIGPackageRefundProcess";
	}
	else if (action_type === "aig2PackageRefund") {
		url = "/List/AIG2PackageRefundProcess";
	}
	else if (action_type === "point_setting") {
		url = "/Manage/PointSettingProcess";
	}
	else if (action_type === "coinAmount_setting") {
		url = "/Manage/CoinAmountSettingProcess";
	}
	else if (action_type === "GetCoinExchangeAmount") {
		url = "/Manage/GetCoinExchangeAmount";
	}
	else if (action_type === "centerMemberList") {
		url = "/List/CenterMemberList";
	}
	else if (action_type === "setIsWithdrawPossible") {
		url = "/Admin/MemberWithdrawSettingProcess";
	}
	else if (action_type === "nft_withdraw_process") {
		url = "/List/NFTWithdrawProcess";
	}
	else if (action_type === "nft_burn_process") {
		url = "/List/NFTBurnProcess";
	}
	else if (action_type === "manage_nft") {
		url = "/Manage/NftDepositProcess";
	}
	else if (action_type === "aig2_recommender_setting") {
		url = "/Manage/Aig2RecommenderRewardSettingProcess";
	}
	else if (action_type === "aig2_admin_pacakge_refund") {
		url = "/Admin/Aig2PackageRefundProcess";
	}
	else if (action_type === "aig_clear_pacakge_stop") {
		url = "/Admin/AigClearPackageBuyStopProcess";
	}
	else if (action_type === "aig2_clear_pacakge_stop") {
		url = "/Admin/Aig2ClearPackageBuyStopProcess";
	}
	else if (action_type === "istar_package_product_info_regist") {
		url = "/istarPackageProductInfoRegistProcess";
	}	
	
	return url;
}

function GetReturnUrl(action_type) {
	var url = "";
	if (action_type === "logout") {
		url = "/Login";
	}
	else if (action_type === "member_out_apply_confirm" || action_type === "member_out") {
		url = "/Admin/MemberList";
	}
	else if (action_type === "notice_write" || action_type === "notice_delete") {
		url = "/NoticeBoard/Notice";
	}
	else if (action_type === "inquire_delete") {
		url = "/NoticeBoard/Inquire";
	}
	//else if (action_type === "manage_pd") {
	//	url = "/Manage/ManagePD";
	//}
	else if (action_type === "pay_apply_confirm") {
		url = "/List/DWList";
	}
	//else if (action_type === "manage_package") {
	//	//url = "/Manage/ManagePackage";
	//	url = "/Manage/ManagePD";
	//}
	else if (action_type === "center_register") {
		url = "/Manage/ManageCenter";
	}
	else if (action_type === "prefect_register") {
		url = "/Manage/ManagePrefect";
	}
	//else if (action_type === "manage_product_buy_way") {
	//	url = "/Manage/ManagePD";
	//}
	else if (action_type === "product_info_edit") {
		url = "/List/ProductList";
	}
	//else if (action_type === "product_buy_reservation_process") {
	//	url = "/List/ProductBuyReservationList";
	//}
	else if (action_type === "product_transaction_process") {
		url = "/List/ProductTransactionList";
	}
	//else if (action_type === "manage_point") {
	//	url = "/Manage/ManagePD";
	//}
	//else if (action_type === "product_buy_delete_process") {
	//	url = "/List/ProductPossessionList";
	//}
	else if (action_type === "product_buy_reservation_permanent_delete_process") {
		url = "/List/ProductBuyReservationList";
	}
	else if (action_type === "product_buy_permanent_delete_process") {
		url = "/List/ProductPossessionList";
	}
	else if (action_type === "change_dw_confirm_check") {
		url = "/List/DWList";
	}
	else if (action_type === "product_buy_way_permanent_delete_process") {
		url = "/List/FeeList";
	}
	else if (action_type === "product_possession_process") {
		url = "/List/ProductPossessionList";
	}
	else if (action_type === "package_product_info_edit") {
		url = "/List/PackageProductList";
	}
	else if (action_type === "send_mother_address_process") {
		url = "/List/AddressList";
	}
	else if (action_type === "lockup_info_edit") {
		url = "/List/LockupList";
	}
	else if (action_type === "regist_ip_info" || action_type === "delete_ip_info") {
		url = "/Master/IpManage";
	}
	else if (action_type === "regist_cs_info") {
		url = "/List/CsList";
	}
	else if (action_type === "delete_cs_info") {
		url = document.location.href;
	}
	else if (action_type === "cancel_package_info") {
		url = document.location.href;
	}
	else if (action_type === "aigPackageRefund") {
		url = document.location.href;
	}
	else if (action_type === "aig2PackageRefund") {
		url = document.location.href;
	}
	else if (action_type === "nft_burn_process") {
		url = document.location.href;
	}
	else if (action_type === "istar_package_product_info_regist") {
		url = "/List/PackageProductList";
	}

	return url;
}

function CallSubmit(is_check_validation, action_type, method_type, data_type, is_file) {
	var success = true;
	var form = $("#" + form_id);

	if (is_check_validation) {
		success = CheckValidation("");
	}

	if (success) {
		var url = GetUrl(action_type);
		
		if (url === "") {
			alert("잘못된 요청입니다.");
			return false;
		}
		else if (action_type === "manage_pd" || action_type === "manage_product_buy_way" || action_type === "manage_package" || action_type === "manage_point" || action_type === "manage_product" || action_type === "product_buy_reservation_process" ||
			action_type === "product_buy_delete_process" || action_type === "product_buy_reservation_permanent_delete_process" || action_type === "product_buy_permanent_delete_process" || action_type === "change_dw_confirm_check" ||
			action_type === "product_buy_way_permanent_delete_process" || action_type === "product_incineration_process" || action_type === "product_possession_process" || action_type === "product_transaction_process" ||
			action_type === "get_mother_address_balance" || action_type === "send_mother_address_process" || action_type === "get_today_withdraw_possible_amount" || action_type === "manage_credit" || action_type === "manage_product_reservation" ||
			action_type === "point_info_edit" || action_type === "manage_change_point" || action_type === "lockup_info_edit" || action_type === "regist_ip_info" || action_type === "delete_ip_info" || action_type === "get_user_turn_list" ||
			action_type === "regist_cs_info" || action_type === "delete_cs_info" || action_type === "edit_cs_info" || action_type === "regist_cs_reply_info" || action_type === "cancel_package_info" || action_type === "aigPackageRefund" || action_type === "aig2PackageRefund" ||
			action_type === "centerMemberList" || action_type === "setIsWithdrawPossible" || action_type === "nft_withdraw_process" || action_type === "nft_burn_process" || action_type === "manage_nft" || action_type === "aig2_admin_pacakge_refund" ||
			action_type === "aig_clear_pacakge_stop" || action_type === "aig2_clear_pacakge_stop" || action_type.indexOf("_package_product_info_regist") != -1
		) {
			CallAjax(method_type, url, data_type, action_type, true, is_file);
		}
		else {
			var result = CallAjax(method_type, url, data_type, action_type, false, is_file);
			success = result.split("|")[0];
			var message = result.split("|")[1];

			if (success === true || success === "true") {
				if (action_type === "organization_id_check") {
					var chart_type = $("input[name=chart_type]:checked").val();
					var chart_sort = $("input[name=chart_sort]:checked").val();
					window.open("/Admin/OrganizationChart?chart_type=" + chart_type + "&chart_sort=" + chart_sort + "&member_id=" + $.trim($("#member_id").val()) + "&center_name=" + $.trim($("#center_name").val()), "_blank");
				}
				else if (action_type === "GetCoinExchangeAmount") {
					$("#swapCoinExchangeAmount").val(message.split("/")[$("#swapStandardCash").val() === "usd" ? 0 : 1]);
				}
				else {
					url = GetReturnUrl(action_type);

					if (action_type === "member_out" || action_type === "member_out_apply_confirm" || action_type === "pin_clear" || action_type === "member_info_edit" || action_type === "notice_write" ||
						action_type === "notice_edit" || action_type === "notice_delete" || action_type === "privacy_policy" || action_type === "terms_of_use" || action_type === "pay_apply_confirm" ||
						action_type === "inquire_edit" || action_type === "inquire_delete" || action_type === "withdraw_setting" || action_type === "manage_package" || action_type === "package_setting" ||
						action_type === "reward_setting" || action_type === "mining_distribution_setting" || action_type === "center_register" || action_type === "center_info_edit" || action_type === "prefect_register" ||
						action_type === "prefect_info_edit" || action_type === "manage_product_buy_way" || action_type === "product_info_edit" || action_type === "product_buy_reservation_process" ||
						action_type === "manage_point" || action_type === "uqt_setting" || action_type === "product_buy_delete_process" || action_type === "package_product_info_edit" ||
						action_type === "deposit_setting" || action_type === "manage_change_point" || action_type === "mining_distribution_setting_process" || action_type === "point_setting" ||
						action_type === "coinAmount_setting" || action_type === "main_notice" || action_type === "aig2_recommender_setting") {
						alert(message);
					}

					if (action_type === "login") {
						url = message;

						var is_save_login_id_check = $("#save_login_id").is(":checked");
						if (is_save_login_id_check) {
							$.cookie("admin_login_cookie_id", null);
							$.cookie("admin_login_cookie_id", $.trim($("#login_id").val()), { expires: 7 });
						} else {
							$.cookie("admin_login_cookie_id", null);
						}
					}
					if (url !== "") {
						if (action_type === "notice_write" || action_type === "notice_edit" || action_type === "notice_delete") {
							url = url + "?notice_code=" + $("#notice_code").val();
						}
						else if (action_type === "package_product_info_edit") {
							url = url + "?sort_turn=" + $("#sort_turn").val();
						}
						location.replace(url);
					}
				}
			}
			else {
				alert(message);
			}

			if (action_type === "mining_distribution_setting_process") {
				var member_idx = $("#member_idx").val();
				var pre_bool_1 = $("#pre_bool_1").val();

				if (success === true || success === "true") {
					var btn_obj = $("#btn_mining_distribution_" + member_idx.toString());
					if (parseInt(pre_bool_1) === 1) {
						btn_obj.addClass("style1");
						btn_obj.text("취소");
						btn_obj.attr("onclick", "SetMiningDistributionSettingProcess(" + member_idx + ", 0)");
					}
					else {
						btn_obj.removeClass("style1");
						btn_obj.text("지급");
						btn_obj.attr("onclick", "SetMiningDistributionSettingProcess(" + member_idx + ", 1)");
					}
				}

				$("#member_idx").val("");
				$("#pre_bool_1").val("");
			}
		}
	}
}

var is_flag = false;
function CallAjax(method_type, url, data_type, action_type, async_type, is_file) {
	//if (action_type === "delete_file") {
	//	is_flag = false;
 //   }

	if (is_flag) return false;
	is_flag = true;

	var success = false;
	var message = "";

	if (async_type === true) {
		async_type = true;
	}
	else {
		async_type = false;
	}

	if (is_file) {
		$.ajax({
			type: method_type,
			enctype: "multipart/form-data",
			url: url,
			dataType: data_type,
			data: new FormData($("#frm")[0]),
			async: async_type,
			processData: false,
			contentType: false,
			cache: false,
			//headers: {
			//	RequestVerificationToken: $("#requestVerificationToken").val()
			//},
			beforeSend: function () {
				if (async_type) {
					Loading(true);
				}
			},
			success: function (data) {
				if (async_type) {
					CallbackAjax(data, action_type, data_type);
				}
				else {
					success = data.Success;
					message = data.Message;
				}
			},
			error: function () {
				if (async_type) {
					Loading(false);
				}
				success = false;
				is_flag = false;
				message = "통신중에러가 발생하였습니다. 재시도해 주세요.";
			},
			complete: function () {
				if (async_type) {
					Loading(false);
				}
				is_flag = false;
			}
		});
	}
	else {
		$.ajax({
			type: method_type,
			url: url,
			dataType: data_type,
			data: $("#frm").serialize(),
			async: async_type,
			cache: false,
			//headers: {
			//	RequestVerificationToken: $("#requestVerificationToken").val()
			//},
			beforeSend: function () {
				if (async_type) {
					Loading(true);
				}
			},
			success: function (data) {
				if (async_type) {
					CallbackAjax(data, action_type, data_type);
				}
				else {
					success = data.Success;
					message = data.Message;
				}
			},
			error: function () {
				if (async_type) {
					Loading(false);
				}
				success = false;
				is_flag = false;
				message = "통신중에러가 발생하였습니다. 재시도해 주세요.";
			},
			complete: function () {
				if (async_type) {
					Loading(false);
				}
				is_flag = false;
			}
		});
	}

	return success + "|" + message;
}

function CallbackAjax(response, action_type, data_type) {
	var is_html = data_type.toLowerCase() === "html";
	var success = is_html ? true : response.Success;
	var message = is_html ? true : response.Message;

	if (action_type === "manage_pd" || action_type === "manage_product_buy_way" || action_type === "manage_package" || action_type === "manage_point" ||
		action_type === "manage_product" || action_type === "manage_credit" || action_type === "manage_product_reservation" || action_type === "manage_change_point" ||
		action_type === "manage_nft") {

		//var encFile = "";
		//if (action_type === "manage_pd") {
		//	encFile = message.split("|")[1];
		//	message = message.split("|")[0];
		//}
		alert(message);

		var is_batch_checked = $("input:checkbox[name=batch_check]").is(":checked");
		if (is_batch_checked) {
			$("#batch_file").val("");
		}

		if (success === true || success === "true") {
			$("#is_check_id").val("0");
			var process_type = "";

			if (action_type === "manage_pd") {
				process_type = "coin_point_" + $("#coin_type").val().replace(".", "");

				//if (encFile != "") {
				//	$("#encFile").val(encFile);
				//	CallAjax("post", "/Manage/DeleteFileProcess", "json", "delete_file", true, false);
				//}
			}
			else if (action_type === "manage_product_buy_way") {
				process_type = "product_buy_way";
			}
			else if (action_type === "manage_package") {
				process_type = "package";
			}
			else if (action_type === "manage_point") {
				process_type = "point";
			}
			else if (action_type === "manage_product") {
				process_type = "product";
			}
			else if (action_type === "manage_credit") {
				process_type = "credit";
			}
			else if (action_type === "manage_product_reservation") {
				process_type = "product_reservation";
			}
			else if (action_type === "manage_change_point") {
				process_type = "change_point_" + $("#point_name").val();
			}
			else if (action_type === "manage_nft") {
				process_type = "nft";
				$("#is_check_token_id").val("0");
				$("#token_id").val("");
			}

			$("#" + process_type).trigger("click");

			if ($("#area_is_lock").length > 0) {
				$('input:radio[name=is_lock]').eq(0).trigger("click");
			}
		}
	}
	//else if (action_type === "delete_file") {
	//	$("#encFile").val("");
 //   }
	else if (action_type === "product_buy_reservation_process" || action_type === "product_buy_delete_process" || action_type === "product_incineration_process") {
		alert(message.split("|")[0]);

		var process_element = action_type === "product_incineration_process" ? "product_buy_delete_process" : action_type;

		if (success === true || success === "true") {
			var colspanCount = $("#area_list_title > th").length;
			$("#" + process_element + "_" + message.split("|")[1]).html("<td colspan='" + colspanCount + "'>처리완료</td>");
		}
		return false;
	}
	else if (action_type === "product_buy_reservation_permanent_delete_process" || action_type === "product_buy_permanent_delete_process" || action_type === "change_dw_confirm_check" || action_type === "product_buy_way_permanent_delete_process" ||
		action_type === "product_possession_process" || action_type === "cancel_package_info") {
		alert(message);

		if (success === true || success === "true") {
			url = GetReturnUrl(action_type);
			location.replace(url);
		}
		return false;
	}
	else if (action_type === "product_transaction_process")
	{
		alert(message);
		if (success === true || success === "true") {
			url = GetReturnUrl(action_type);
			location.replace(url);
		}
		return false;
	}
	else if (action_type === "get_mother_address_balance")
	{
		if (success === true || success === "true") {
			$("#mother_balance").text(message);
		}
		else {
			alert(message);
		}
		return false;
	}
	else if (action_type === "get_today_withdraw_possible_amount") {
		if (success === true || success === "true") {
			$("#today_withdraw_possible_amount").text(message);
		}
		else {
			alert(message);
		}
		return false;
	}
	else if (action_type === "send_mother_address_process")
	{
		alert(message);
		if (success === true || success === "true") {
			url = GetReturnUrl(action_type);
			location.replace(url);
		}
		return false;
	}
	else if (action_type === "point_info_edit" || action_type === "edit_cs_info" || action_type === "regist_cs_reply_info") {
		alert(message);
		return false;
	}
	else if (action_type === "lockup_info_edit" || action_type === "regist_ip_info" || action_type === "delete_ip_info") {
		alert(message);
		if (success === true || success === "true") {
			url = GetReturnUrl(action_type);
			location.replace(url);
		}
		return false;
	}
	else if (action_type === "get_user_turn_list") {
		$("#user_turn_list_modal").children().html(response);
		$("#user_turn_list_modal").modal({ backdrop: 'static', keyboard: false });
	}
	else if (action_type === "regist_cs_info" || action_type === "delete_cs_info") {
		alert(message);
		PageMoveHref(GetReturnUrl(action_type));
		return false;
	}
	else if (action_type === "aigPackageRefund") {
		alert(message);
		if (success === true || success === "true") {
			location.replace(GetReturnUrl(action_type));
		}
		return false;
	}
	else if (action_type === "aig2PackageRefund") {
		alert(message);
		if (success === true || success === "true") {
			location.replace(GetReturnUrl(action_type));
		}
		return false;
	}
	else if (action_type === "centerMemberList") {
		$("#area_center_member_list").append(response);
	}
	else if (action_type === "setIsWithdrawPossible") {
		alert(message);
		$("#allCheck, input:checkbox[id^=memberIdx_]").prop("checked", false);
		GetList();
	}
	else if (action_type === "nft_withdraw_process") {
		alert(message.split("|")[0]);

		if (success === true || success === "true") {
			let stateCode = $("#stateCode").val();
			let isComplete = stateCode === "complete";
			let obj = $("#nft_transaction_" + $("#logIdx").val());

			obj.children().eq(3).children().attr("class", stateCode);
			obj.children().eq(3).children().html(isComplete ? "완료" : "취소");
			obj.children().eq(8).html(message.split("|")[2]);
			obj.children().eq(9).html(message.split("|")[1]);
			obj.children().eq(10).html("");
		}
	}
	else if (action_type === "nft_burn_process") {
		alert(message);
		if (success === true || success === "true") {
			location.replace(GetReturnUrl(action_type));
		}
	}
	else if (action_type === "aig2_admin_pacakge_refund")	{
		alert(message);

		if (success === true || success === "true") {
			$("#packageRefundAmount").val($("#sumPackageAmount").val());
			$("#btnAig2PackageRefund").remove();
		}
	}
	else if (action_type === "aig_clear_pacakge_stop" || action_type === "aig2_clear_pacakge_stop") {
		alert(message);
	}
	else if (action_type.indexOf("_package_product_info_regist")) {
		alert(message);
		if (success === true || success === "true") {
			location.replace(GetReturnUrl(action_type));
		}
	}
	else {
		alert("잘못된 요청입니다.");
		return;
	}
}

function CheckExistence(id) {
	var success = CheckValidation(id, true, false);
	if (!success) {
		$("#" + id).focus();
		return success;
	}
	else {
		$("#existence_check_type").val(id);

		var result = CallAjax("post", "/Admin/CheckExistenceProcess", "json");
		success = result.split("|")[0];
		var message = result.split("|")[1];

		var obj = $("#" + id);

		if (success === true || success === "true") {
			if (id === "member_id" || id === "center_leader_member_id" || id === "prefect_leader_member_id") {
				$("#is_check_id").val("1");
				var sum_price = result.split("|")[2];
				var sum_amount = result.split("|")[2];
				var sum_package_quantity = result.split("|")[3];
				//var sum_package_amount = result.split("|")[4];
				var sum_product_buy_way_complete_quantity = result.split("|")[4];
				var sum_product_buy_way_quantity = result.split("|")[5];				
				var sum_down_recommender_count = result.split("|")[6];
				var sum_down_support_count = result.split("|")[7];
				var sum_point_amount = result.split("|")[8];
				var sum_down_recommender_revenue_amount = result.split("|")[9];
				var sum_matching_fail_count = result.split("|")[10];
				var sum_credit_count = result.split("|")[11];
				var sum_payments_possible_credit_count = result.split("|")[12];
				var product_reservation_possible_count = result.split("|")[13];
				var sum_change_point_amount = result.split("|")[14];
				var sumDownRecommenderPackageAmount = result.split("|")[15];
				var gradeName = result.split("|")[16];

				if ($("input[name=process_type]").length > 0) {
					var process_type = $("input[name=process_type]:checked").val();
					if (process_type.search("coin_point_") !== -1) {
						sum_price = sum_amount;
					}
					else if (process_type === "product_buy_way") {
						sum_price = sum_product_buy_way_quantity;
					}
					else if (process_type === "package") {
						sum_price = sum_package_quantity;
					}
					else if (process_type === "point") {
						sum_price = sum_point_amount;
					}
					else if (process_type === "credit") {
						sum_price = sum_credit_count;
					}
					else if (process_type.search("change_point_") !== -1) {
						sum_price = sum_change_point_amount;
					}
				}

				if ($("#sum_price").length > 0) {
					$("#sum_price").val(sum_price);
				}
				if ($("#package_quantity").length > 0) {
					$("#package_quantity").val(sum_package_quantity);
				}
				if ($("#sum_product_buy_way_complete_quantity").length > 0) {
					$("#sum_product_buy_way_complete_quantity").val(sum_product_buy_way_complete_quantity);
				}
				if ($("#sum_product_buy_way_quantity").length > 0) {
					$("#sum_product_buy_way_quantity").val(sum_product_buy_way_quantity);
				}
				if ($("#sum_down_recommender_count").length > 0) {
					$("#sum_down_recommender_count").val(sum_down_recommender_count);
				}
				if ($("#sum_down_recommender_revenue_amount").length > 0) {
					$("#sum_down_recommender_revenue_amount").val(sum_down_recommender_revenue_amount);
				}
				if ($("#sum_down_support_count").length > 0) {
					$("#sum_down_support_count").val(sum_down_support_count);
				}
				if ($("#sum_point_amount").length > 0) {
					$("#sum_point_amount").val(sum_point_amount);
				}
				if ($("#matching_possible_quantity").length > 0) {
					$("#matching_possible_quantity").val(sum_matching_fail_count);
				}
				if ($("#payments_possible_amount").length > 0) {
					$("#payments_possible_amount").val(sum_payments_possible_credit_count);
				}
				if ($("#product_reservation_possible_count").length > 0) {
					$("#product_reservation_possible_count").val(product_reservation_possible_count);
				}
				//if ($("#package_amount").length > 0) {
				//	$("#package_amount").val(sum_package_amount);
				//}
				if ($("#sumDownRecommenderPackageAmount").length > 0) {
					$("#sumDownRecommenderPackageAmount").val(sumDownRecommenderPackageAmount);
				}
				if ($("#gradeName").length > 0) {
					$("#gradeName").val(gradeName);
				}
			}
			else if (id === "center_name") {
				$("#is_check_center").val("1");
			}
			else if (id === "prefect_name") {
				$("#is_check_prefect").val("1");
			}
			else if (id === "token_id") {
				$("#is_check_token_id").val("1");
			}
		}
		else {
			if (id === "member_id" || id === "center_leader_member_id" || id === "prefect_leader_member_id") {
				$("#is_check_id").val("0");
				if ($("#sum_price").length > 0) {
					$("#sum_price").val("0");
				}
				if ($("#package_quantity").length > 0) {
					$("#package_quantity").val("0");
				}
				if ($("#sum_product_buy_way_complete_quantity").length > 0) {
					$("#sum_product_buy_way_complete_quantity").val("0");
				}
				if ($("#sum_product_buy_way_quantity").length > 0) {
					$("#sum_product_buy_way_quantity").val("0");
				}
				if ($("#sum_down_recommender_count").length > 0) {
					$("#sum_down_recommender_count").val("0");
				}
				if ($("#sum_down_recommender_revenue_amount").length > 0) {
					$("#sum_down_recommender_revenue_amount").val("0");
				}
				if ($("#sum_down_support_count").length > 0) {
					$("#sum_down_support_count").val("0");
				}
				if ($("#sum_point_amount").length > 0) {
					$("#sum_point_amount").val("0");
				}
				if ($("#matching_possible_quantity").length > 0) {
					$("#matching_possible_quantity").val("0");
				}
				if ($("#payments_possible_amount").length > 0) {
					$("#payments_possible_amount").val("0");
				}
				if ($("#product_reservation_possible_count").length > 0) {
					$("#product_reservation_possible_count").val("0");
				}
				//if ($("#package_amount").length > 0) {
				//	$("#package_amount").val("0");
				//}
			}
			else if (id === "center_name") {
				$("#is_check_center").val("0");
			}
			else if (id === "prefect_name") {
				$("#is_check_prefect").val("0");
			}
			else if (id === "token_id") {
				$("#is_check_token_id").val("0");
			}
		}
		ReturnMessage(obj, success, message);
	}
}

function Loading(is_on) {
	$(".ring-back").removeClass("active");

	if (is_on) {
		$(".ring-back").addClass("active");
	}
}

function Logout() {
	var result = CallAjax("post", "/Login/LogoutProcess", "json");
	success = result.split("|")[0];
	var message = result.split("|")[1];

	if (success === true || success === "true") {
		location.replace("/Login");
	}
	else {
		alert(message);
	}
}

function MemberOutApplyConfirmProcess(member_idx, member_id, member_hp_number, member_email_address) {
	if (confirm("아이디(" + member_id + ")의 탈퇴를 수락 하시겠습니까?(복구불가)")) {
		$("#member_idx").val(member_idx);
		$("#before_member_hp_number").val(member_hp_number);
		$("#before_member_email_address").val(member_email_address);
		CallSubmit(false, "member_out_apply_confirm", "post", "json");
	}
}

function MemberOutProcess(member_idx, member_id, member_hp_number, member_email_address) {
	if (confirm("아이디(" + member_id + ")를 탈퇴처리 하시겠습니까?(복구불가)")) {
		$("#member_idx").val(member_idx);
		$("#before_member_hp_number").val(member_hp_number);
		$("#before_member_email_address").val(member_email_address);
		CallSubmit(false, "member_out", "post", "json");
	}
}

function NoticeDeleteProcess() {
	if (confirm("삭제처리 하시겠습니까?(복구불가)")) {
		CallSubmit(false, "notice_delete", "post", "json");
	}
}

function InquireDeleteProcess() {
	if (confirm("삭제처리 하시겠습니까?(복구불가)")) {
		CallSubmit(false, "inquire_delete", "post", "json");
	}
}

function MemoView(type, memo) {
	var memo_title = "TXID";
	if (type === "memo") {
		memo = memo.replace(/<br\s?\/?>/g, "\n");
		memo = memo.replace(/\n/g, "<br />");
		memo_title = "MEMO";
	}
	else if (type === "id") {
		memo = memo.replace(/<br\s?\/?>/g, "\n");
		memo = memo.replace(/\n/g, "<br />");
		memo_title = "ID";
	}
	else if (type === "info") {
		memo = memo.replace(/<br\s?\/?>/g, "\n");
		memo = memo.replace(/\n/g, "<br />");
		memo_title = "INFO";
	}

	$("#memo_title").text(memo_title);
	$("#memo").html(memo);
	$("#memo-modal").modal({ backdrop: 'static', keyboard: false });
}

function SetComma(price) {
	price = price.toString();
	var processPrice = price;
	var appendPrice = "";
	var is_decimal = false;

	if (price.indexOf(".") !== -1) {
		is_decimal = true;
		processPrice = price.split(".")[0];
		appendPrice = price.split(".")[1];

		var cut_decimal_count = 0;
		var loop_count = 0;
		var last_value = "";
		var i = 0;

		while (i === 0) {
			var start_cut_turn = appendPrice.length - (loop_count + 1);
			var end_cut_turn = start_cut_turn + 1;
			last_value = appendPrice.substring(start_cut_turn, end_cut_turn);

			if (last_value.toString() === "0") {
				cut_decimal_count++;
			}
			else {
				break;
			}
			loop_count++;
		}

		appendPrice = appendPrice.substring(0, appendPrice.length - cut_decimal_count);
	}

	var commaPrice = processPrice.replace(/(\d)(?=(?:\d{3})+(?!\d))/g, '$1,');

	if (is_decimal) {
		price = commaPrice + "." + appendPrice;
	}
	else {
		price = commaPrice;
	}
	
	return price;
}

function SetRemoveComma(price) {
	if (price.toString().indexOf(",") !== -1) {
		price = price.replace(/,/g, "");
	}
	return price;
}

function GetToFixed(float_number, cut_num) {
	float_number = parseFloat(float_number);

	if (float_number.toString().indexOf(".") !== -1) {
		cut_num = parseInt(cut_num);
		float_number = float_number.toFixed(cut_num + 1).toString();

		var array_number = float_number.split(".");
		var down_float_number = array_number[1];

		if (down_float_number.length === cut_num + 1) {
			var last_char = down_float_number.toString().charAt(down_float_number.toString().length - 1);

			if (parseInt(last_char) === 5) {
				down_float_number = down_float_number.toString().substring(0, down_float_number.toString().length - 1) + "6";
			}
		}

		float_number = array_number[0].toString() + "." + down_float_number.toString();
		float_number = parseFloat(float_number).toFixed(cut_num).toString();
	}

	return float_number;
}

function GetFloor(float_number, cut_num) {
	float_number = parseFloat(float_number);

	if (float_number.toString().indexOf(".") !== -1) {
		cut_num = parseInt(cut_num);

		var array_number = float_number.toString().split(".");
		var down_float_number = array_number[1];

		if (down_float_number.length > cut_num) {
			down_float_number = down_float_number.toString().substring(0, cut_num);
		}

		float_number = array_number[0].toString() + "." + down_float_number.toString();
	}

	return float_number;
}

function GetToday() {
	var date = new Date();
	var year = date.getFullYear();
	var month = 1 + date.getMonth();
	month = month >= 10 ? month : '0' + month;
	var day = date.getDate();
	day = day >= 10 ? day : '0' + day;

	return year + '-' + month + '-' + day;
}

function GetNowDate() {
	var date = new Date();
	var now_year = date.getFullYear();
	var now_month = date.getMonth() + 1;
	var now_date = date.getDate();	

	if (now_date < 10)
		now_date = "0" + now_date;

	if (now_month < 10)
		now_month = "0" + now_month;

	var today = now_year + "-" + now_month + "-" + now_date;

	var now_hours = date.getHours();
	var now_minutes = date.getMinutes();
	var now_seconds = date.getSeconds();

	if (now_hours < 10)
		now_hours = "0" + now_hours;

	if (now_minutes < 10)
		now_minutes = "0" + now_minutes;

	if (now_seconds < 10)
		now_seconds = "0" + now_seconds;

	return today + " " + now_hours + ":" + now_minutes + ":" + now_seconds;
}

function MaxlengthCheck(obj) {
	let maxLength = obj.attr("maxlength");
	$("#contentsCnt").html("(" + obj.val().length + " / " + maxLength + ")");

	if (obj.val().length > parseInt(maxLength)) {
		obj.val(obj.val().substring(0, maxLength));
		$("#contentsCnt").html("(" + maxLength + " / " + maxLength + ")");
	}
}

function UploadFileCheck(obj) {
	var status = true;
	DeletePreview(obj);

	if (obj.files[0] != undefined) {
		var max_img_kb_size = parseInt($("#max_img_mb_size").val()) * 1024 * 1024;
		var this_id = $(obj).attr("id");
		var ext = $("#" + this_id).val().split('.').pop().toLowerCase();
		var fileExt = $("#" + this_id).attr("accept").split(",");
		var arrayfileExt = [];

		for (var i = 0; i < fileExt.length; i++) {
			arrayfileExt.push(fileExt[i].replace(" ", "").split("/")[1]);
		}

		if (parseInt(obj.files[0].size) > parseInt(max_img_kb_size)) {
			alert("첨부 파일은 최대 " + $("#max_img_mb_size").val() + "MB 까지만 가능합니다.");
			status = false;
		}

		if (status) {
			if ($.inArray(ext, arrayfileExt) == -1) {
				alert("첨부가능한 파일형식을 확인해 주세요.");
				status = false;
			}
		}

		if (status) {
			GetImagePreview(obj);
		}
		else {
			DeletePreview(obj);
			$("#" + this_id).val("");
		}
	}
	else {
		$("#" + this_id).val("");
    }

	return status;
}

function GetImagePreview(obj) {
	let objPreview = $(obj).next().children("img");
	if ($(obj).next().attr("class").indexOf("hide") != -1) {
		$(obj).next().removeClass("hide");
	}

	if (obj.files && obj.files[0]) {
		var reader = new FileReader();
		reader.onload = function (e) {
			let imgSrc = e.target.result;
			objPreview.attr("src", imgSrc);
			objPreview.parent().addClass("showImg");
		}
		reader.readAsDataURL(obj.files[0]);
	} else {
		objPreview.parent().removeClass("showImg");
		objPreview.attr("src", "");
	}
}

function DeletePreview(obj) {
	let objPreview = $(obj).next().children("img");

	objPreview.attr("src", "");
	objPreview.parent().removeClass("showImg");
}

function DeleteFile(id) {
	$("#" + id).val("");
	var obj = $("#" + id);
	let objPreview = $(obj).next().children("img");
	var objOriginalImg = obj.parent().next();
	var prevImg = objPreview.attr("src");
	
	if (objOriginalImg.val() == prevImg) {
		objOriginalImg.val("");
	}
	objPreview.attr("src", "");
	objPreview.parent().removeClass("showImg");
}

function ShowOriginalSizeImg(id) {
	$("#original_size_img").attr("src", $("#" + id).attr("src"));
	$("#modal_original_size_img").modal({ backdrop: 'static', keyboard: false });
}